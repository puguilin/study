
1 mySql 数据库连接
   第一步： 引入依赖
                <dependency>
                   <groupId>mysql</groupId>
                   <artifactId>mysql-connector-java</artifactId>
               </dependency>

   第二步： properties配置文件
      #数据库配置
      spring.datasource.url=jdbc:mysql://localhost:3306/test?useUnicode=true&characterEncoding=utf-8&useSSL=false&serverTimezone=GMT%2B8
      spring.datasource.username=root
      spring.datasource.password=123
      spring.datasource.driver-class-name=com.mysql.cj.jdbc.Driver
      # 逆向工具生成时指定的驱动包 如果不需要逆向生成则不需要
      spring.driverLocation=D:/JX/maven_repository/repository/mysql/mysql-connector-java/8.0.20/mysql-connector-java-8.0.20.jar


2 日志存放地址：

    第一步：添加依赖：
         <dependency>
              <groupId>commons-logging</groupId>
              <artifactId>commons-logging</artifactId>
              <version>1.1.1</version>
          </dependency>

   第二步： 在 application-dev.properties 文件下配置：

              配置在当前项目下
             logging.path=./guilin/log

             或者 配置在本地磁盘上

3 < !-- mybatis-plus 依赖 -->

       <!--mybatis-plus自动的维护了mybatis以及mybatis-spring的依赖，
       在springboot中这三者不能同时的出现，避免版本的冲突，表示：跳进过这个坑（不然很被发现）-->
        <dependency>
            <groupId>com.baomidou</groupId>
            <artifactId>mybatis-plus-boot-starter</artifactId>
            <version>3.1.2</version>
        </dependency>

        <!-- MP 核心库 -->
        <dependency>
            <groupId>com.baomidou</groupId>
            <artifactId>mybatis-plus</artifactId>
            <version>3.1.2</version>
        </dependency>
        <!-- mybatis-plus代码生成器 -->
        <dependency>
            <groupId>com.baomidou</groupId>
            <artifactId>mybatis-plus-generator</artifactId>
            <version>3.1.2</version>
        </dependency>

4 <!-- swagger -->
        高版本访问地址 http://localhost:8081/swagger-ui/
        低版本访问地址 http://localhost:8080/swagger-ui.html
        <dependency>
            <groupId>io.springfox</groupId>
            <artifactId>springfox-swagger-ui</artifactId>
            <version>3.0.0</version>
        </dependency>
        <dependency>
            <groupId>io.springfox</groupId>
            <artifactId>springfox-swagger2</artifactId>
            <version>3.0.0</version>
            <!--解决页面访问 swagger -ui 页面报错 For input string: ““
            地址：https://blog.csdn.net/m0_47275929/article/details/116694891
            -->
            <exclusions>
                <exclusion>
                    <groupId>io.swagger</groupId>
                    <artifactId>swagger-models</artifactId>
                </exclusion>
            </exclusions>
        </dependency>
         <dependency>
            <groupId>io.swagger</groupId>
            <artifactId>swagger-models</artifactId>
            <version>1.5.21</version>
         </dependency>

5 Quartz 定时任务
     <!--定时任务 quartz-->
            <dependency>
                <groupId>org.springframework.boot</groupId>
                <artifactId>spring-boot-starter-quartz</artifactId>
            </dependency>


   步骤：参考  https://blog.csdn.net/zhizexiaoyao/article/details/118597042

   方式一：
        1 添加依赖
        2 创建具体执行类 TaskJob  继承下QuartzJobBean，并重写下里面的方法executeInternal
               JobExecutionContext工作执行上下文，这里面会包含定时任务的任务设置，
               触发设置，还有我们设置的jobData传递过来的一些数据，我们在执行的时候就可以获取这些数据来执行我们自己的一些代码处理逻辑。
        3 创建/实现定时任务接口 ScheduleService
        4 新建一个实现类 ScheduleServiceImpl  注入任务调度 Scheduler
        5 创建初始化任务类  SystemSchedulerInit 添加注解@Configuration  如果不需要启动就执行就不需要 也可以在controller 层通过访问方式手动执行
        6 在启动类上添加 @EnableScheduling
        7 项目启动就会执行
   方式二：
        通过配置类 ScheduleConfig  来启动

   方式三：
        通过controller层自己手动控制启动

    注意 三者不可以同时使用




6 mybatis-generator 逆向生成工具
       先导入依赖：
             <build>
                 <plugins>
                     <!--maven插件-->
                     <plugin>
                         <groupId>org.springframework.boot</groupId>
                         <artifactId>spring-boot-maven-plugin</artifactId>
                     </plugin>

                     <!--mybatis-generator-->
                     <plugin>
                         <groupId>org.mybatis.generator</groupId>
                         <artifactId>mybatis-generator-maven-plugin</artifactId>
                         <version>1.3.7</version>
                         <configuration>
                             <verbose>true</verbose>
                             <overwrite>true</overwrite>
                         </configuration>
                     </plugin>
                 </plugins>
             </build>

    第一步： application.properties 配置数据源 并且指定      驱动 driverLocation
    第二步： 在resources类目录下 创建 generatorConfig.xml文件 配置相关的信息
    第三歩： 执行 在idea右上角的maven项目中选中
        Plugins -- -> mybatis-generator -->双击 mybatis-generaor:generate  即可生成

    产生的问题
        1  控制台可能报log4j 的错误 或者生成重复的节点方法 那就要修改pom.xml 中插件的 版本号
        2 生成user时 多生成 UserWithBlobs 类
            解决： 在配置文件中的context中加入 defaultModelType="flat"
            解释：  <!--defaultModelType="flat" 大数据字段，不分表 -->

7 <!-- aop依赖 -->
    实现AOP记录面向用户的日志  参考 https://www.jianshu.com/p/c7d8e83ebf86
    1 <!-- aop依赖 -->
          <dependency>
              <groupId>org.springframework.boot</groupId>
              <artifactId>spring-boot-starter-aop</artifactId>
          </dependency>
    2 修改配置文件
        在项目的application.properties文件中添加下面一句配置：
        spring.aop.auto=true
        特别说明下，这句话不加其实也可以，因为默认就是true，只要我们在pom.xml中添加了依赖就可以了，这里提出来是让大家知道有这个有这个配置。
    3 自定义注解
        需要自定义一个注解，使用的时候在需要记录日志的方法上添加这个注解@Log就可以了，首先在启动类的同级包下边新建一个config包，在这个报下边新建new一个名为Log的Annotation文件，文件内容如下：
    4 准备数据库日志表以及实体类，sql接口
        向数据库中插入记录，前提需要创建一张记录日志的表 (或者直接用代码生成器生成)
            CREATE TABLE `sys_log` (
              `id` int(11) NOT NULL AUTO_INCREMENT COMMENT '主键',
              `user_id` int(11) NOT NULL COMMENT '操作员id',
              `user_action` varchar(255) NOT NULL COMMENT '用户操作',
              `create_time` datetime DEFAULT NULL COMMENT '创建时间',
              PRIMARY KEY (`id`)
            ) ENGINE=InnoDB AUTO_INCREMENT=12 DEFAULT CHARSET=utf8 COMMENT='日志记录表';
    5 AOP的切面和切点

    方式一：实现AOP记录面向开发者的日志（日志入库--日志记录到数据库）

            介绍重点--创建AOP切面实现类，同样我们这里将该类放在config包下，命名为LogAsPect.java,内容如下：
        6 测试控制器
            定义一个测试方法，带有两个参数，并且为该方法添加了我们自定义的@Log注解，
            启动项目，浏览器访问http://localhost:8081/log/aop?name=xfr&nick=eran,这时候查看eclipse控制台的部分输出信息如下：
                我在目标方法之前执行！
                我被执行了！
                当前登陆人：1,类名:com.guilin.studycode.controller.AopLogController,方法名:aop,参数：[xfr, eran],执行时间：2074
            查看表 也会有记录 sys_log

    方式二：日志不入库，控制台打印出来即可。

        1 首先在LogAsPect.java中定义一个新的切点表达式，如下：
            @Pointcut("execution(public * com.guilin.studycode.controller..*.*(..))") 表示匹配controller包及其子包下的所有公有方法
            public void pointcutController() {}
        2 再添加匹配到方法 around2（）
        3 再在控制器中添加一个测试方法 testAop3
            可以看到这个方法我们并没有加上@Log注解，重启项目，浏览器访问http://localhost:8081/log/testaop3?name=xfr&nick=eran,这时候查看eclipse控制台的部分输出信息

8 javaIO流--- 文件的操作
    在测试包中的fileTest 目录下
        1、路径分隔符
            Windows：\\   E:\fileUp\test\桌面背景图\壁纸.jpg
            Linux: /

9 Spring Boot 更换 Banner

     1 新建一个banner.txt文件，
            src/main/resources路径下新建一个banner.txt文件  banner.txt中填写好需要打印的字符串内容即可。
     2 借助第三方工具帮忙转化内容，如网站http://www.network-science.de/ascii/将文字转化成字符串，
        网站：http://www.degraeve.com/img2txt.php可以将图片转化成字符串。

10 使用Docker部署Spring Boot  linux 未安装docker 暂时无法通过docker启动
      参考  https://www.cnblogs.com/ityouknow/p/8599093.html

    1 创建一个 DockerController，在其中有一个index()方法，访问时返回：Hello Docker!
    2 启动后浏览器放问：http://localhost:8081/，页面返回：Hello Docker!，说明 Spring Boot 项目启动正常
    3 Spring Boot 项目添加 Docker 支持
        <properties>
        	<docker.image.prefix>springboot</docker.image.prefix>
        </properties>
    4 plugins 中添加 Docker 构建插件
        <build>
        	<plugins>
        		<!-- Docker maven plugin -->
        		<plugin>
        			<groupId>com.spotify</groupId>
        			<artifactId>docker-maven-plugin</artifactId>
        			<version>1.0.0</version>
        			<configuration>
        				<imageName>${docker.image.prefix}/${project.artifactId}</imageName>
        				<dockerDirectory>src/main/docker</dockerDirectory>
        				<resources>
        					<resource>
        						<targetPath>/</targetPath>
        						<directory>${project.build.directory}</directory>
        						<include>${project.build.finalName}.jar</include>
        					</resource>
        				</resources>
        			</configuration>
        		</plugin>
        		<!-- Docker maven plugin -->
        	</plugins>
        </build>
    5 在目录src/main/docker下创建 Dockerfile 文件，Dockerfile 文件用来说明如何来构建镜像。
    6 构建打包环境
        需要有一个 Docker 环境来打包 Spring Boot 项目，这里以 Centos 7 为例
        1 安装 Docker 环境  -----resources/notice下的docker安装
        2 安装JDK
        3 安装MAVEN
    7 使用 Docker 部署 Spring Boot 项目 -----resources/notice下的docker部署
        访问浏览器：http://localhost:8081/


11  md5 加密解密
    查看这个类 UserController
    1、加密
        //添加或修改学生信息 UserController类 的 /saveOrUpdate方法
    2、解密
        //查询方法     UserController类 的 /queryByIdAndPassward方法
